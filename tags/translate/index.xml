<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Translate on 前端叨叨客</title>
    <link>http://jyu213.github.io/tags/translate/</link>
    <description>Recent content in Translate on 前端叨叨客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jun 2017 01:05:16 +0800</lastBuildDate>
    <atom:link href="/tags/translate/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>四个调节颜色的 CSS 滤镜</title>
      <link>http://jyu213.github.io/blog/2017/06/09/%E5%9B%9B%E4%B8%AA%E8%B0%83%E8%8A%82%E9%A2%9C%E8%89%B2%E7%9A%84-css-%E6%BB%A4%E9%95%9C/</link>
      <pubDate>Fri, 09 Jun 2017 01:05:16 +0800</pubDate>
      
      <guid>http://jyu213.github.io/blog/2017/06/09/%E5%9B%9B%E4%B8%AA%E8%B0%83%E8%8A%82%E9%A2%9C%E8%89%B2%E7%9A%84-css-%E6%BB%A4%E9%95%9C/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;本文为译文，原文地址： &lt;a href=&#34;http://vanseodesign.com/css/4-css-filters-for-adjusting-color/&#34;&gt;http://vanseodesign.com/css/4-css-filters-for-adjusting-color/&lt;/a&gt; ，作者，@Steven Bradley&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SVG 提供了一种非破坏性的方式来改变图像或图形的某些颜色属性。不幸的是，其中的一些变化比其它的更麻烦。CSS 滤镜允许你无损的改变颜色的一些性质，比 SVG 简单。&lt;/p&gt;

&lt;p&gt;最近几周我一直在谈论 CSS 滤镜作为 SVG 滤镜的替代品。首先我提供了一个&lt;a href=&#34;http://vanseodesign.com/css/css-filters-introduction/&#34;&gt;介绍&lt;/a&gt;和展示 &lt;code&gt;blur()&lt;/code&gt; 滤镜函数的示例，然后我浏览了 &lt;a href=&#34;镜函数，并分别提供了示例。
http://vanseodesign.com/css/drop-shadow-filter/&#34;&gt;&lt;code&gt;url()&lt;/code&gt; 和 &lt;code&gt;grop-shadow() &lt;/code&gt;&lt;/a&gt; 滤镜函数，并分别提供了示例。&lt;/p&gt;

&lt;p&gt;今天我想介绍四个 CSS 滤镜函数，所有这些都是 SVG 滤镜原语 &lt;code&gt;feColorMatrix&lt;/code&gt; 的不同类型和值的映射。&lt;/p&gt;

&lt;h2 id=&#34;fecolormatrix-滤镜原语-filter-primitive&#34;&gt;feColorMatrix 滤镜原语（Filter Primitive）&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;feColorMatrix&lt;/code&gt; 滤镜原语可以用于更改元素&lt;a href=&#34;http://vanseodesign.com/web-design/hue-saturation-and-lightness/&#34;&gt;颜色的一些基本属性&lt;/a&gt;。顾名思义，原语使用矩形来添加不同的滤镜效果。&lt;/p&gt;

&lt;p&gt;存在四种不同的 CSS &lt;code&gt;filter-function&lt;/code&gt; 来达到 &lt;code&gt;feColorMatrix&lt;/code&gt; 的效果。这是一个例子，其中单个 SVG 原语可以比任何一个 CSS 滤镜功能做得更多。&lt;/p&gt;

&lt;p&gt;这是四种 CSS 滤镜：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grayscale()&lt;/li&gt;
&lt;li&gt;hue-rotate()&lt;/li&gt;
&lt;li&gt;saturate()&lt;/li&gt;
&lt;li&gt;sepia()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;让我们在下图中做一些具体的实践。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.vanseodesign.com/blog/wp-content/uploads/2013/09/strawberry-fields.jpg&#34; alt=&#34;img1&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;grayscale-函数&#34;&gt;grayscale() 函数&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;grayscale()&lt;/code&gt; &lt;code&gt;filter-function&lt;/code&gt; 功能将图像转换为灰度。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grayscale() = grayscale( [ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以通过提供 0.0 到 1.0 之间的百分比或数字来确定转换图像的比例。100%（或 1.0）是完全转换为灰度，0% （或 0.0）则没有任何转换。0.0 和 1.0 或 0% 和 100% 直接的值是线性的乘数效应。负值是不被允许的。&lt;/p&gt;

&lt;p&gt;在第一个例子中，我使用 &lt;code&gt;filter-function&lt;/code&gt; 中的值 1 将 100% 的灰度应用到上图中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.strawberry {
 filter: grayscale(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原始图像包含很多灰色，但我认为你可以看到滤镜的效果，因为现在所有的颜色都已被删除。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.vanseodesign.com/blog/wp-content/uploads/2013/09/strawberry-fields.jpg&#34; alt=&#34;img2&#34; style=&#34;filter: grayscale(1);&#34;&gt;&lt;/p&gt;

&lt;p&gt;为了比较矩阵和 &lt;code&gt;filter-function&lt;/code&gt;，公平起见，通过将 &lt;code&gt;type&lt;/code&gt; 属性设置为 &lt;code&gt;saturate&lt;/code&gt; 来使 &lt;code&gt;feColorMatrix&lt;/code&gt; 更轻松地删除颜色。看如下部分代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;filter id=&amp;quot;grayscale&amp;quot;&amp;gt;
 &amp;lt;feColorMatrix type=&amp;quot;matrix&amp;quot;
    values=&amp;quot;(0.2126 + 0.7874 * [1 - amount]) (0.7152 - 0.7152 * [1 - amount]) (0.0722 - 0.0722 * [1 - amount]) 0 0
            (0.2126 - 0.2126 * [1 - amount]) (0.7152 + 0.2848 * [1 - amount]) (0.0722 - 0.0722 * [1 - amount]) 0 0
            (0.2126 - 0.2126 * [1 - amount]) (0.7152 - 0.7152 * [1 - amount]) (0.0722 + 0.9278 * [1 - amount]) 0 0 0 0 0 1 0&amp;quot;/&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过，这绝对是 CSS &lt;code&gt;filter-function&lt;/code&gt; 功能更容易使用的情况。我知道使用这个特定的矩阵唯一的原因是我在网上发现一个例子，不需要搜索 &lt;code&gt;filter-function&lt;/code&gt; 的值为 1。&lt;/p&gt;

&lt;h2 id=&#34;hue-rotate-函数&#34;&gt;hue-rotate() 函数&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hue-rotate() filter-function&lt;/code&gt; 将元素中每个像素的色调改变为你指定的数量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hue-rotate() = hue-rotate( &amp;lt;angle&amp;gt; )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;角度设置为度数，你需要将单位指定为 &lt;code&gt;deg&lt;/code&gt;。 0deg 的角度使得元素不变， 和 360deg(720deg, 1080deg, 1440p等)的任意倍数一致。&lt;/p&gt;

&lt;p&gt;这个例子中我设置了角度为 255deg。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.strawberry {
 filter: hue-rotate(225deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该值将红色和黄色的花朵变成含有更多粉色，紫色和蓝色的花朵。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.vanseodesign.com/blog/wp-content/uploads/2013/09/strawberry-fields.jpg&#34; alt=&#34;img3&#34; style=&#34;filter: hue-rotate(225deg);&#34;&gt;&lt;/p&gt;

&lt;p&gt;以下是 SVG &lt;code&gt;filter&lt;/code&gt; 的对比。CSS 依旧更简单。不过这种情况并不多。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;filter id=&amp;quot;hue-rotate&amp;quot;&amp;gt;
 &amp;lt;feColorMatrix type=&amp;quot;hueRotate&amp;quot; values=&amp;quot;225&amp;quot;/&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;saturate-函数&#34;&gt;saturate() 函数&lt;/h2&gt;

&lt;p&gt;CSS 还提供了一个 &lt;code&gt;saturate() filter-function&lt;/code&gt;，你可以使用它来更改元素饱和度。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;saturate() = saturate( [ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;
和&lt;/code&gt;grayscale` 函数一样，该值定义了转让的比例。0% （或 0.0） 导致完全饱和度的元素，100%（或 1.0） 使元素保持不变。之间的值是线性的乘数效应。&lt;/p&gt;

&lt;p&gt;这里我设置了 50%。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.strawberry {
 filter: saturate(0.5);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回图片如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.vanseodesign.com/blog/wp-content/uploads/2013/09/strawberry-fields.jpg&#34; alt=&#34;img4&#34; style=&#34;filter: saturate(0.5);&#34;&gt;&lt;/p&gt;

&lt;p&gt;不允许使用负值，但是你可以提供大于 100% 或 1.0 的值。使得元素超饱和、再次使用 900% 饱和度的图像（ &lt;code&gt;filter:saturate(9);&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.vanseodesign.com/blog/wp-content/uploads/2013/09/strawberry-fields.jpg&#34; alt=&#34;img5&#34; style=&#34;filter: saturate(9);&#34;&gt;&lt;/p&gt;

&lt;p&gt;如同 &lt;code&gt;saturate()&lt;/code&gt;，相应的 SVG &lt;code&gt;filter&lt;/code&gt; 是比较简单的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;filter id=&amp;quot;saturate&amp;quot;&amp;gt;
 &amp;lt;feColorMatrix type=&amp;quot;saturate&amp;quot; values=&amp;quot;0.5&amp;quot;/&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我之前提到，你可以通过将 &lt;code&gt;type&lt;/code&gt; 属性设置为 &lt;code&gt;saturate&lt;/code&gt;，来使 &lt;code&gt;feColorMatrix&lt;/code&gt; 更轻松地创建灰度图像。你只需要将值设置为 0，使得图像完全饱和，这与将其设置为 100% 灰度产生。&lt;/p&gt;

&lt;h2 id=&#34;sepia-函数&#34;&gt;sepia() 函数&lt;/h2&gt;

&lt;p&gt;最后还有 &lt;code&gt;sepia() filter-function&lt;/code&gt; 将图像转换为深褐色。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sepia() = sepia( [ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在应该很熟悉，但是值定义了转换的比例。100%（1.0）是完全深褐色，而 0%（0.0）则保持图像不变。期间的值是效果间的线性乘数效应。&lt;/p&gt;

&lt;p&gt;不允许使用负值，但是你可以提供大于 100% 或 1.0 的值，但不会添加效果。&lt;/p&gt;

&lt;p&gt;这里我设置为 75%。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.strawberry {
 filter: sepia(75%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图片如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.vanseodesign.com/blog/wp-content/uploads/2013/09/strawberry-fields.jpg&#34; alt=&#34;img6&#34; style=&#34;filter: sepia(75%);&#34;&gt;&lt;/p&gt;

&lt;p&gt;对于没有 &lt;code&gt;sepia&lt;/code&gt;  类型的 &lt;code&gt;feColorMatrix&lt;/code&gt;，所有想要获得与使用另一个矩阵的深褐色效果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;filter id=&amp;quot;sepia&amp;quot;&amp;gt;
 &amp;lt;feColorMatrix type=&amp;quot;matrix&amp;quot;
    values=&amp;quot;(0.393 + 0.607 * [1 - amount]) (0.769 - 0.769 * [1 - amount]) (0.189 - 0.189 * [1 - amount]) 0 0
            (0.349 - 0.349 * [1 - amount]) (0.686 + 0.314 * [1 - amount]) (0.168 - 0.168 * [1 - amount]) 0 0
            (0.272 - 0.272 * [1 - amount]) (0.534 - 0.534 * [1 - amount]) (0.131 + 0.869 * [1 - amount]) 0 0 0 0 0 1 0&amp;quot;/&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我认为你同意 CSS 滤镜功能是这两个选项，即使 SVG 在更灵活配置。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;这四个 CSS 过滤器功能都是 滤镜原语 &lt;code&gt;feColorMatrix&lt;/code&gt; 的不同类型和值的映射。其中两个代替复杂的矩阵，而另外两个替换一个特定类型的原语。&lt;/p&gt;

&lt;p&gt;我希望您同意，所有这四个过滤功能都足够容易理解和使用。我怀疑你会很难与他们合作，或弄清楚用来调整图像和图形的值。&lt;/p&gt;

&lt;p&gt;下一周，我将通过查看四个更多的&lt;a href=&#34;http://vanseodesign.com/web-design/svg-filter-primitives-fecomponenttransfer/&#34;&gt;滤镜原语&lt;/a&gt;创建的效果。与今天四个功能一样，我相你会下周的功能通常与原语更若以使用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【译】CSS 网格的春天</title>
      <link>http://jyu213.github.io/blog/2017/05/10/%E8%AF%91css-%E7%BD%91%E6%A0%BC%E7%9A%84%E6%98%A5%E5%A4%A9/</link>
      <pubDate>Wed, 10 May 2017 22:34:58 +0800</pubDate>
      
      <guid>http://jyu213.github.io/blog/2017/05/10/%E8%AF%91css-%E7%BD%91%E6%A0%BC%E7%9A%84%E6%98%A5%E5%A4%A9/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;本文为译文，原文地址： &lt;a href=&#34;http://jonibologna.com/spring-into-css-grid，作者，@jonitrythall&#34;&gt;http://jonibologna.com/spring-into-css-grid，作者，@jonitrythall&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CSS 网格(Grid)最近一直受到很多的关注，我终于在过去的一个周末腾出时间来了解它的基本工作原理。道路很曲折，前途很美好（说真的，这是改变生活的东西），但是我在创建示例并分享的同时，整理了一些笔记。&lt;/p&gt;

&lt;p&gt;这篇文章不是只看看这个布局功能有多强大，而是希望它在这混乱中把威胁因素移除，或者进入 CSS 网格。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/jonitrythall/full/xdOrrq/&#34;&gt;点击这里查看完整的 Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;制定一个计划&#34;&gt;制定一个计划&lt;/h3&gt;

&lt;p&gt;和学习任何网络新事物一样，我立即打开 &lt;code&gt;Adobe Illustrator&lt;/code&gt;，感受自然，网格和紫色带来的灵感，我开始绘制一个基本的户外场景，然后开始尝试用 CSS 网格来实现。&lt;/p&gt;

&lt;p&gt;下图为我的最终搞：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/scene-01.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;标记&#34;&gt;标记&lt;/h3&gt;

&lt;p&gt;标记由一个 &lt;code&gt;class&lt;/code&gt; 名为 &lt;code&gt;contain&lt;/code&gt; 的 &lt;code&gt;div&lt;/code&gt; 主容器以及十二个 &lt;code&gt;class&lt;/code&gt; 名为 &lt;code&gt;spring&lt;/code&gt; 的子集 &lt;code&gt;div&lt;/code&gt; 组成。HTML 和 CSS 代码片段如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;contain&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/sun.svg&amp;quot; alt=&amp;quot;Sun&amp;quot; width=&amp;quot;15%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/cloud_copy.svg&amp;quot; alt=&amp;quot;Cloud&amp;quot; width=&amp;quot;30%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/cloud_copy.svg&amp;quot; alt=&amp;quot;Cloud&amp;quot; width=&amp;quot;30%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/rain.svg&amp;quot; alt=&amp;quot;Rain&amp;quot; width=&amp;quot;60%&amp;quot; /&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/rain.svg&amp;quot; alt=&amp;quot;Rain&amp;quot; width=&amp;quot;60%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/rain.svg&amp;quot; alt=&amp;quot;Rain&amp;quot; width=&amp;quot;27%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/dragonfly.svg&amp;quot; alt=&amp;quot;Dragonfly&amp;quot; width=&amp;quot;30%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/butterfly.svg&amp;quot; alt=&amp;quot;Butterfly&amp;quot; width=&amp;quot;30%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/dragonfly.svg&amp;quot; alt=&amp;quot;Dragonfly&amp;quot; width=&amp;quot;30%&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/butterfly.svg&amp;quot; alt=&amp;quot;Butterfly&amp;quot; width=&amp;quot;30%&amp;quot;/&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/flower1.svg&amp;quot; alt=&amp;quot;First flower&amp;quot; /&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/flower2.svg&amp;quot; alt=&amp;quot;Second flower&amp;quot; /&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/flower3.svg&amp;quot; alt=&amp;quot;Third flower&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;spring&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/80625/flowers2.svg&amp;quot; alt=&amp;quot;Fourth flower&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sass&#34;&gt;$orange: #FB9C6F;

body {
  border: 2px solid $orange;
}

.contain {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 2fr) 1fr 4fr;
  grid-gap: 2px;
  background-color: $orange;
}

.spring {
  padding: 2em;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #FFF;
}

// Sun
.spring:nth-child(1) {
  grid-column: 1 / 5;
}

// Cloud 1
.spring:nth-child(2) {
  grid-column: 1 / 3;
}

// Cloud 2
.spring:nth-child(3) {
  grid-column: 3 / 5;
}

// Rain 1
.spring:nth-child(4) {
  grid-column: 1 / 2;
}

// Rain 2
.spring:nth-child(5) {
  grid-column: 2 / 3;
}

// Rain 3
.spring:nth-child(6) {
  grid-column: 3 / 5;
}

// Flowers 1
.spring:nth-child(11) {
  grid-column: 1 / 4;
  justify-content: space-around;
}

// Flowers 2
.spring:nth-child(12) {
  grid-column: 4 / 5;
}

// Just simplifying for smaller window
@media (max-width: 550px) {
  .contain {
    display: block;
  }

  .spring:nth-child(3),
  .spring:nth-child(5),
  .spring:nth-child(6),
  .spring:nth-child(7),
  .spring:nth-child(8),
  .spring:nth-child(11) {
    display: none;
  }

  img {
    width: 30%;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在实现网格之前，布局是标准的状态，所有的图像堆叠在一起。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-12-27-03-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;columns&#34;&gt;columns&lt;/h3&gt;

&lt;p&gt;使用网格时首先需要在 CSS 网格容器中声明它：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.contain {
    display: grid;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：这里也有 &lt;code&gt;inline-grid&lt;/code&gt; 和 &lt;code&gt;subgrid&lt;/code&gt; 作为选项。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里将立即设置容器内所有的子元素为网格项。&lt;/p&gt;

&lt;p&gt;初始网格基于使用 &lt;code&gt;grid-template-columns&lt;/code&gt; 属性设置的四个相同大小的列。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.contain {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;repeat&lt;/code&gt; 函数允许缩短 &lt;code&gt;1fr 1fr 1fr 1fr&lt;/code&gt; 的写法。&lt;/p&gt;

&lt;h3 id=&#34;fr-单位&#34;&gt;&lt;code&gt;fr&lt;/code&gt; 单位&lt;/h3&gt;

&lt;p&gt;网格属性可以接受多个不同的单位值，本例中只使用了 &lt;code&gt;fr&lt;/code&gt;。这个单位是超级聪明和灵活的，因为它将可用空间划分为分数，所以 &lt;code&gt;1fr 1fr 1fr 1fr&lt;/code&gt; 将生成四个相同大小的列。&lt;/p&gt;

&lt;h3 id=&#34;网格间距&#34;&gt;网格间距&lt;/h3&gt;

&lt;p&gt;网格间距由每个项目的 &lt;code&gt;2px&lt;/code&gt; 橙色间距表示。间隙显示主容器的背景颜色，为橙色，外边框是 &lt;code&gt;body&lt;/code&gt; 本身。每个网格包含一个白色背景的图像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-12-01-19-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;p&gt;示例使用缩写 &lt;code&gt;grid-gap&lt;/code&gt; 来匹配 &lt;code&gt;grid-column-gap&lt;/code&gt; 和 &lt;code&gt;grid-row-gap&lt;/code&gt;。该属性接受单个共享值或者两个不同的值，第一个参数表示行，第二个表示列。&lt;/p&gt;

&lt;h3 id=&#34;从列起点和终点来排列项目&#34;&gt;从列起点和终点来排列项目&lt;/h3&gt;

&lt;p&gt;一旦在主容器上设置基本列，容器中的每个子元素 &lt;code&gt;div&lt;/code&gt; 都可以单独进一步设计，已实现以下网格：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-1-02-31-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是通过 &lt;code&gt;grid-column-start&lt;/code&gt; 和 &lt;code&gt;grid-column-end&lt;/code&gt; 属性或 &lt;code&gt;grid-column&lt;/code&gt; 简写来指定元素的起点和终点来完成的。&lt;/p&gt;

&lt;p&gt;例如，每个后代元素 &lt;code&gt;div&lt;/code&gt; 起点和终点定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.spring:nth-child(4) {
  grid-column: 1 / 2;
}

.spring:nth-child(5) {
  grid-column: 2 / 3;
}

.spring:nth-child(6) {
  grid-column: 3 / 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第四列项目（第一个雨图像容器）的 &lt;code&gt;grid-column: 1 / 2 ;&lt;/code&gt; 指示它在第一垂直网格线开始并在第二列结束，而第六项（第三个云图像容器）被设置为在第三垂直网格线开始并在第五列结束，使其成为其它的两倍。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-2-30-25-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最初这可能有点棘手，因为垂直线超过了实际网格列单元的个数。&lt;/p&gt;

&lt;p&gt;太阳图像能够通过从第一垂直网线开始并在最后一行终止，即第五行，跨越所有四个可用单元格，从而占据全宽。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.spring:nth-child(1) {
  grid-column: 1 / 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-24-at-8-50-24-AM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;p&gt;没有必要对蜻蜓图像和蝴蝶图像做任何事情，因为所需的布局与主容器 &lt;code&gt;.contain&lt;/code&gt; &lt;code&gt;div&lt;/code&gt; 上的列声明一致。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-12-13-05-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;rows&#34;&gt;rows&lt;/h3&gt;

&lt;p&gt;回到容器元素设置行，这是我来演示这个奇怪风景的最后一步。尽管初始列由相等的间距组成，但是行具有更多的变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-12-57-19-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前三行是最小行的两倍，而最大行是最小行的四倍，如下所示： &lt;code&gt;grid-template-rows: repeat(3, 2fr) 1fr 4fr;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个设计对于行的需求是相当轻的，这就是行样式所需的程度，但是行有自己的一组属性，有些甚至可以与列属性组合来创建速记法，保持 CSS 的简洁。&lt;/p&gt;

&lt;h3 id=&#34;flexbox&#34;&gt;Flexbox&lt;/h3&gt;

&lt;p&gt;谈及 flexbox（并且最近创建了一个&lt;a href=&#34;https://gum.co/YdWw&#34;&gt;印刷视觉指南&lt;/a&gt;），我只想说，在这个示例中，&lt;code&gt;flexbox&lt;/code&gt; 用于将图像在网格中居中，而网格和 &lt;code&gt;flexbox&lt;/code&gt; 实际上可以一起使用。&lt;/p&gt;

&lt;p&gt;使用如下，使得每张图片都在项目中居中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.spring {
    display: flex;
    justify-content: center;
    align-items: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;div&lt;/code&gt; 包含三个独立的花图像，&lt;code&gt;flexbox&lt;/code&gt; 也水平划分它们。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-12-15-43-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.spring:nth-child(11) {
    display: flex;
    justify-content: space-around;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Robin Rendle&lt;/code&gt; 最近在 &lt;code&gt;CSS-Tricks&lt;/code&gt; 上写了有关这个主题的一个&lt;a href=&#34;https://css-tricks.com/css-grid-replace-flexbox/&#34;&gt;很好的总结&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;浏览器支持&#34;&gt;浏览器支持&lt;/h3&gt;

&lt;p&gt;目前浏览器支持状况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jonibologna.com/content/images/2017/04/Screen-Shot-2017-04-23-at-1-24-17-PM.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;资源&#34;&gt;资源&lt;/h3&gt;

&lt;p&gt;这里有一些比较好的扩展阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/getting-started-css-grid/&#34;&gt;Getting Started with CSS Grid&lt;/a&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout&#34;&gt;Basic CSS Grid Concepts on MDN&lt;/a&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&#34;&gt;CSS Grid Layout on MDN&lt;/a&gt;
&lt;a href=&#34;https://www.w3.org/TR/css3-grid-layout/&#34;&gt;The spec&lt;/a&gt;
&lt;a href=&#34;http://cssgridgarden.com/&#34;&gt;CSS Grid Garden&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;结尾&#34;&gt;结尾&lt;/h3&gt;

&lt;p&gt;要了解 CSS Grid 的功能，还需要学习更多的东西，我迫不及待地写更多的内容，但希望这篇文章可以作为一个有趣的起点。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
