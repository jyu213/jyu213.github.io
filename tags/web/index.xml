<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on 前端叨叨客</title>
    <link>http://jyu213.github.io/tags/web/</link>
    <description>Recent content in Web on 前端叨叨客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 30 Nov 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/web/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>跨域那些事</title>
      <link>http://jyu213.github.io/blog/2014/11/30/%E8%B7%A8%E5%9F%9F%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jyu213.github.io/blog/2014/11/30/%E8%B7%A8%E5%9F%9F%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>

&lt;h3 id=&#34;同源策略&#34;&gt;同源策略&lt;/h3&gt;

&lt;p&gt;javascript 语言在设计之初为了安全考虑，不允许调用其它页面的对象。 跨域是由 javascript 语言安全限制中的同源策略造成的。
&lt;strong&gt;同源策略&lt;/strong&gt;指的是，一段脚本只能读取来自同一来源的窗口和文档的属性，(同一来源指的是&lt;strong&gt;域名&lt;/strong&gt;、&lt;strong&gt;协议&lt;/strong&gt;和&lt;strong&gt;端口号&lt;/strong&gt;的组合)
简单来讲，即不允许同一域名下的不同端口号，不同协议（http,https），不用子域名（www.dxy.cn 和 app.dxy.cn）及域名和域名对应的 ip 也不允许。&lt;/p&gt;

&lt;h3 id=&#34;解决跨域的原理&#34;&gt;解决跨域的原理&lt;/h3&gt;

&lt;p&gt;HTML 中，静态资源是没有跨域限制的。在 HTML DOM 中，script 标签是可以跨域访问服务器上的数据的。所以我们可以手动插入 script 标签等方法来伪造。 不过，有个限制是，服务器返回 内容不能单纯为一个 json 字符串，可定变量或函数实现，如: &lt;code&gt;var json = {&amp;quot;type&amp;quot;:&amp;quot;json&amp;quot;}&lt;/code&gt; 或 &lt;code&gt;json({&amp;quot;type&amp;quot;:&amp;quot;json&amp;quot;})&lt;/code&gt;。jsonp 即采用后者形式。&lt;/p&gt;

&lt;h3 id=&#34;解决方案&#34;&gt;解决方案&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;手动插入&lt;code&gt;script&lt;/code&gt;标签的形式。&lt;/li&gt;
&lt;li&gt;jsonp
&amp;hellip;
它能对老的浏览器也保持支持。 但是，只支持 get 不支持 post 等其它类型的 HTTP 请求。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;跨域资源共享（CORS）
使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求的成功或者失败。
服务器端对于 CORS 的支持，主要通过 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 进行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var xhr = new XMLHttpRequest();
xhr.open(&#39;get&#39;, &#39;/xx&#39;, true);
xhr.send();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iframe + domain
对于主域相同而子域不同，则可以只用 document.domain 来实现跨域。&lt;/p&gt;

&lt;p&gt;e.g. 在 &lt;code&gt;http://a.com/test.html&lt;/code&gt; 和 &lt;code&gt;http://sub.a.com/test2.html&lt;/code&gt; 中分别加上 &lt;code&gt;document.domain = a.com&lt;/code&gt;，然后 test.html 页面中创建 iframe 来控制iframe的内容文档。&lt;/p&gt;

&lt;p&gt;注意的是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;domain 指向的是主域。 （如 a.com ， www.a.com 其实是二级域名）&lt;/li&gt;
&lt;li&gt;document.domain 需设置为自身或更高一级的父域&lt;/li&gt;
&lt;li&gt;浏览器限制2 为，不同域的框架之间是不能进行 js 的交互的(可取到 window对象，但取不到 window 对象的属性和方法,PS: html5中的 postMessage 例外)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;window.name
&lt;code&gt;window.name&lt;/code&gt; 值在不同页面（包括不同域下）加载后依旧存在(当然关闭窗口后就销毁了)。注意的是，window.name 由大小限制，一般为2M。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HTML5 window.postMessage&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;隐藏 form, target 指向一个隐藏的 iframe&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
