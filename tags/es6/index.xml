<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Es6 on 前端叨叨客</title>
    <link>http://jyu213.github.io/tags/es6/</link>
    <description>Recent content in Es6 on 前端叨叨客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 28 Sep 2017 00:47:14 +0800</lastBuildDate>
    <atom:link href="/tags/es6/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ES6 proxy</title>
      <link>http://jyu213.github.io/blog/2017/09/28/es6-proxy/</link>
      <pubDate>Thu, 28 Sep 2017 00:47:14 +0800</pubDate>
      
      <guid>http://jyu213.github.io/blog/2017/09/28/es6-proxy/</guid>
      <description>&lt;p&gt;Proxy，顾名思义就是代理，是指在目标对象前加一层拦截（traps），可用于对访问对象的拦截和过滤。那么这个和上一节讲到的 Decorator 有什么区别呢？&lt;/p&gt;

&lt;p&gt;Decorator 是给对象添加一些额外的职责，说白了是保持原有的逻辑不变。而 Proxy 的话更倾向于为对象提供一种代理，从而控制对这个对象的访问。&lt;/p&gt;

&lt;p&gt;先来看看基本的实例。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let proxy = new Proxy(target, handler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;target&lt;/code&gt; 表示要拦截的对象，可以是 &lt;code&gt;Array&lt;/code&gt;，&lt;code&gt;Object&lt;/code&gt;，&lt;code&gt;Function&lt;/code&gt; 或者另一个 &lt;code&gt;Proxy&lt;/code&gt;。&lt;code&gt;handler&lt;/code&gt; 表示要拦截的行为。而作用的结果则体现在 Proxy 的实例 &lt;code&gt;proxy&lt;/code&gt; 上。如果目标没有拦截，就等同于原对象。&lt;/p&gt;

&lt;p&gt;对于具体的 API 这里就不做展开了，需要补充的同学可以直接&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;点击查看&lt;/a&gt;。无非是监听对象的操作，然后执行相应的目标行为。比如 &lt;code&gt;get&lt;/code&gt;，&lt;code&gt;set&lt;/code&gt;，&lt;code&gt;deleteProperty&lt;/code&gt; 等等。&lt;/p&gt;

&lt;p&gt;从一个简单的 get 操作来看看 proxy 实际是如何操作的。在取对象 obj 值的时候，记录一条日志。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let obj = {a: 1}
let proxy = new Proxy(obj, {
    get (target, key, proxy) {
        console.log(`get target key ${target[key]}`)
        return target[key]
    }
})
console.log(proxy.a)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Proxy 之前，我们会做类似功能来模拟。通过 globalGetInterceptor 函数来实现具体的对象操作内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// babel-plugin-proxy
var defaultHandle = {
    get: function(obj, propName) {
        return obj[propName]
    }
}
var Proxy = function(target, handle) {
    this.target = target
    this.handle = handle

    this.handle.get = this.handle.get || defaultHandle.get
}
Proxy.getTrap = function(propName) {
    return this.handle.get(this.target, propName)
}
function globalGetInterceptor(obj, propName) {
    if (obj instanceof Proxy) {
        return obj.getTrap(propName)
    }
    var value = defaultHandle.get(obj, propName)
    if (typeof value === &#39;function&#39;) {
        return value.bind(this)
    } else {
        return value
    }
}
globalGetInterceptor(proxy, &#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上，Proxy 的应用场景挺广的。目前看到他们常用有：
* 对对象访问的控制
* 降低函数或类的复杂度
* 对资源的检验&lt;/p&gt;

&lt;p&gt;通过具体的例子来演示一下。&lt;/p&gt;

&lt;p&gt;第一个 &lt;code&gt;console&lt;/code&gt; 的例子，稍微扩展一下的话，就可以当做监控来使用。比如在 get 或者 set 方法中加入对应的埋点等操作等等。&lt;/p&gt;

&lt;p&gt;还是用上面讲到的 obj 对象。我们也可以做一些校验，访问控制等等。比如我们只允许 obj 属性赋值是数字。不然就报错。例子如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let obj = {a: 1}
let proxy = new Proxy(obj, {
    set (target, key, newValue) {
        if (isNaN(newValue)) {
            throw &#39;Error: isNaN&#39;
        }
        target[key] = newValue
    }
})
proxy.b = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有更高阶的，比如双向绑定等等。不一一例举了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES7 Decorators</title>
      <link>http://jyu213.github.io/blog/2017/06/18/es7-decorators/</link>
      <pubDate>Sun, 18 Jun 2017 22:10:05 +0800</pubDate>
      
      <guid>http://jyu213.github.io/blog/2017/06/18/es7-decorators/</guid>
      <description>

&lt;p&gt;Decorators 的概念来源于 Python，可以称为&lt;strong&gt;装饰器&lt;/strong&gt;。简单的理解其实它就是一个 &lt;code&gt;wrapper&lt;/code&gt;，&lt;strong&gt;对目标函数或对象进行修改并返回&lt;/strong&gt;。如果从 Java 的角度的话，可以看作是一个 &lt;code&gt;filter&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;它只是一种语法糖，本质上是对函数的变换。先来看看经典的日志系统吧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person {
  @log
  getFullName(firstname, lastname) {
    return `${firstname}${lastname}`
  }
}

function log(target, key, descriptor){
  const value = descriptor.value
  descriptor.value = (...args) =&amp;gt; {
    console.log(`Calling ${key} with`, args)
    return value.apply(null, arguments)
  }
  return descriptor
}

const person = new Person()
person.getFullName(&#39;LeBron&#39;, &#39;James&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@&lt;/code&gt; 声明的 &lt;code&gt;@log&lt;/code&gt; 即为 &lt;code&gt;decorator&lt;/code&gt;，它是一个函数，接收三个参数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt;，需要定义属性的对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;，属性名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;descriptor&lt;/code&gt;， 属性描述符，同 &lt;code&gt;Object.defineProperty&lt;/code&gt; 的 &lt;code&gt;decorator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;发现了么，其实 &lt;code&gt;decorators&lt;/code&gt; 底层用的也是 &lt;code&gt;Object.defineProperty&lt;/code&gt; 的属性来写的。&lt;/p&gt;

&lt;p&gt;如果单纯通过外面包的一层函数来实现的话，会是怎么样的？其实也挺简单的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function log(target){
  console.log(target.name, typeof target, arguments)
  return (...args) =&amp;gt; {
   console.log(`Calling ${target.name} with`, args)
    target.call(this, [](#).slice.call(arguments))
  }
}

class Person{
  getFullName(firstname, lastname) {
    // …
  }
}
Person.prototype.getFullName = log(Person.prototype.getFullName)
// …
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际项目开发中，我们可以通过使用 &lt;code&gt;babel-plugin-syntax-decorators&lt;/code&gt; 或 &lt;code&gt;babel-plugin-transform-decorators-legacy&lt;/code&gt; 来转码。让我们来看看 babel 中的实现方式。以下只是一些伪代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  // descriptor 赋值逻辑以及默认属性
  Object[&#39;keys&#39;](#)(descriptor).forEach(function (key) {
    desc[key](#) = descriptor[key](#);
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (desc.initializer === void 0) {
    Object[&#39;defineProperty&#39;](#)(target, property, desc);
    desc = null;
  }

  return desc;
}

let Person = (_class = class Person {
  getFullName(firstname, lastname) {
    return `${ firstname }${ lastname }`;
  }
}, (_applyDecoratedDescriptor(_class.prototype, &#39;getFullName&#39;, [log](#), Object.getOwnPropertyDescriptor(_class.prototype, &#39;getFullName&#39;), _class.prototype)), _class);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;作用-结尾&#34;&gt;作用 &amp;amp; 结尾&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;用于函数或类的修饰&lt;/li&gt;
&lt;li&gt;由于用的 Object.defineProperty 特性，所以 descriptor 还可以对对象属性层级的操作&lt;/li&gt;
&lt;li&gt;实现 &lt;code&gt;mixin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用于工厂函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;几个有趣的库，对 decorator 做了一些加强。有兴趣的同学可以翻翻。
* &lt;a href=&#34;https://github.com/jayphelps/core-decorators.js&#34;&gt;core-decorators.js&lt;/a&gt;
* &lt;a href=&#34;https://github.com/akira-cn/core-wrappers&#34;&gt;core-wrappers&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES6 - 字符串模板</title>
      <link>http://jyu213.github.io/blog/2015/12/14/es6---%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jyu213.github.io/blog/2015/12/14/es6---%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF/</guid>
      <description>

&lt;h2 id=&#34;es6-字符串模板&#34;&gt;ES6 - 字符串模板&lt;/h2&gt;

&lt;h3 id=&#34;写在前面&#34;&gt;写在前面&lt;/h3&gt;

&lt;p&gt;关于 ES6, 也终于在 2015 年的 7 月 18 号尘埃落定了。虽然说各大浏览器还没有全面的支持，不过这并不妨碍我们一颗想要撸一把的心。在后端，可以使用 Node.js(0.12+)或 io.js, 前端的话，也可以使用&lt;a href=&#34;http://babeljs.io/&#34;&gt;Babel&lt;/a&gt; 或&lt;a href=&#34;https://github.com/google/traceur-compiler#what-is-traceur&#34;&gt;Traceur&lt;/a&gt; 进行语法预转义成 ES5使用 。&lt;/p&gt;

&lt;p&gt;关于该系列（不知道能不能成为一个系列，总是各种懒），会没有规律的挑选一些内容来学习。欢迎大家积极纠错，留言探讨。&lt;/p&gt;

&lt;h3 id=&#34;模板字符串-template-strings&#34;&gt;模板字符串(template strings)&lt;/h3&gt;

&lt;p&gt;ES6 中引进的一种新型的字符串字面量语法 - 模板字符串。书面上来解释，模板字符串是一种能在字符串文本中内嵌表示式的字符串字面量。简单来讲，就是增加了变量功能的字符串。&lt;/p&gt;

&lt;p&gt;先来看一下以前我们对字符串的使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    /**
     * Before ES6 字符串拼接
     */
    var name = &#39;丁香医生&#39;;
    var desc = &#39;丁香医生是面向大众的科普性健康类网站&#39;;
    var html = function(name, desc){
        var tpl = &#39;公司名：&#39; + name + &#39;\n&#39;+
                &#39;简介：&#39;+ desc;
        return tpl;
    }
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而现在：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    var html = `公司名：${name}
        简介：${desc}`;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很简洁吧。
引一段 MDN 对于模板字符串的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法(${expression})的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而占位符&lt;code&gt;${}&lt;/code&gt;，可以是任意的 js 表达式（函数或者运算），甚至是另一个模板字符串，会将其计算的结果作为字符串输出。如果模板中需要使用&lt;code&gt;$,{&lt;/code&gt;等字符串，则需要进行转义。&lt;/p&gt;

&lt;p&gt;看个例子就明白了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    var x = 1;
    var y = 2;
    `${ x } + ${ y } = ${ x + y}`  // &amp;quot;1 + 2 = 3&amp;quot;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不同于普通字符串，模板字符串还可以多行书写，模板字符串中所有的空格，新行，缩进都会原样的输出在生成的字符串中。&lt;/p&gt;

&lt;p&gt;而单纯的模板字符串还存在着很多的局限性。如：
* 不能自动转义特殊的字符串。（这样很容易引起注入攻击）
* 不能很好的和国际化库配合（即不会格式化特定语言的数字，日期，文字等）
* 没有内建循环语法，（甚至连条件语句都不支持， 只可以使用模板套构的方法）&lt;/p&gt;

&lt;h3 id=&#34;标签模板-tagged-template&#34;&gt;标签模板(tagged template)&lt;/h3&gt;

&lt;p&gt;为此，引出了标签模板的概念。标签模板则是在反引号前面引入一个标签（tag）。该标签是一个函数，用于处于定制化模板字符串后返回值。就拿上面对特殊字符串举例。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    /**
     * HTML 标签转义
     * @param {Array.&amp;lt;DOMString&amp;gt;} templateData 字符串类型的tokens
     * @param {...} ..vals 表达式占位符的运算结果tokens
     *
     */
    function SaferHTML(templateData) {
      var s = templateData[0];
      for (var i = 1; i &amp;lt; arguments.length; i++) {
        var arg = String(arguments[i]);
        // Escape special characters in the substitution.
        s += arg.replace(/&amp;amp;/g, &amp;quot;&amp;amp;amp;&amp;quot;)
                .replace(/&amp;lt;/g, &amp;quot;&amp;amp;lt;&amp;quot;)
                .replace(/&amp;gt;/g, &amp;quot;&amp;amp;gt;&amp;quot;);
        // Don&#39;t escape special characters in the template.
        s += templateData[i];
      }
      return s;
    }
    // 调用
    var html = SaferHTML`&amp;lt;p&amp;gt;这是关于字符串模板的介绍&amp;lt;/p&amp;gt;`;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;标签函数会接收多个参数。
* 第一个参数是包含了字符串字面量(即那些没有变量替换的值)的数组
* 后面的参数是已经替换后的变量值&lt;/p&gt;

&lt;p&gt;改一下例子1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    var name = &#39;丁香医生&#39;;
    var desc = &#39;丁香医生是面向大众的科普性健康类网站&#39;;
    tag`公司名：${name}简介：${desc}`
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tag 的参数则分别为 [&amp;lsquo;公司名：&amp;rsquo;,&amp;lsquo;简介：&amp;rsquo;], &amp;lsquo;丁香医生&amp;rsquo;, &amp;lsquo;丁香医生是面向大众的科普性健康类网站&amp;rsquo;。&lt;/p&gt;

&lt;p&gt;有了此类方法，就大大的增加了控制的权利。如上面说的国际化库甚至循环语句。&lt;/p&gt;

&lt;h3 id=&#34;浏览器兼容性&#34;&gt;浏览器兼容性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;服务器端， io.js 支持&lt;/li&gt;
&lt;li&gt;浏览器端， FF34+ , chrome 41+&lt;/li&gt;
&lt;li&gt;移动端 IOS 8, Android 4.4&lt;/li&gt;
&lt;li&gt;IE Tech Preview&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://es6.ruanyifeng.com/#docs/string&#34;&gt;ECMAScript 6 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2015/01/ES6-Template-Strings&#34;&gt;Getting Literal With ES6 Template Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2015/01/template-strings-html.html&#34;&gt;HTML templating with ES6 template strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings&#34;&gt;模板字符串 - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://segmentfault.com/a/1190000002950341&#34;&gt;ES6 Features系列：Template Strings &amp;amp; Tagged Template Strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ES6 - 解构赋值</title>
      <link>http://jyu213.github.io/blog/2015/12/14/es6---%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jyu213.github.io/blog/2015/12/14/es6---%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
      <description>

&lt;p&gt;在解释什么是解构赋值前，我们先来看一下， ES5 中对变量的声明和赋值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var str = &#39;hello word&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;左边一个变量名，右边可以是字符串，数组或对象。&lt;/p&gt;

&lt;p&gt;ES6 中增加了一种更为便捷的赋值方式。称为 &lt;strong&gt;Destructuring&lt;/strong&gt; 。好像大家普遍翻译为解构。解构赋值允许我们将数组或对象的属性赋予给任何变量，该变量的定义语法与数组字面量或对象字面量很相似。举个例子可以直观的说明。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [speak, name] = [&#39;hello&#39;, &#39;destructuring&#39;];
console.log( speak + &#39; &#39; + name ); // hello destructuring
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数组的解构赋值&#34;&gt;数组的解构赋值&lt;/h3&gt;

&lt;p&gt;用更加直白的话来描述就是，等号两边保持相同的形式（数组对应数组，对象对应对象），则左边的变量就会被赋予对应的值。如果对应的右边值缺失，缺失部分变量值为 &lt;code&gt;undefined&lt;/code&gt; ,如果右边值多余，依旧能够正常解构。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ES6 中
let arr = [1,2,3,4,5];
let [el1, el2] = [arr];
// 或者
let [el1, el2] = [1,2,3,4,5];
// el1 =&amp;gt; 1, el2 =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解构赋值也是可嵌套的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let value = [1, 2, [3, 4, 5]];
let [el1, el2, [el3, el4]] = value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样可以通过简单地在指定位置省略变量来忽略数组中的某个元素：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let value = [1, 2, 3, 4, 5];
let [el1, , el3, , el5] = value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更进一步，默认值同样也可以被指定：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [firstName = &amp;quot;John&amp;quot;, lastName = &amp;quot;Doe&amp;quot;] = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6中，提供了一种将右侧多余的值以数组的形式赋值给左侧变量的语法——“rest“模式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [head, ...tail] = [1, 2, 3, 4];
console.log(tail);  // [2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当默认值不存在，变量值就等于 &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [missing] = [];
console.log(missing);  // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的数组，指的是部署了 &lt;code&gt;[Iterator](http://www.2ality.com/2015/02/es6-iteration.html)&lt;/code&gt; 接口的数据结构。&lt;/p&gt;

&lt;h3 id=&#34;对象的解构赋值&#34;&gt;对象的解构赋值&lt;/h3&gt;

&lt;p&gt;和数组的用法相类似，一个主要的不同点是，对象是无次序排列的，所以变量必须和属性名相同。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let person = {firstName: &amp;quot;John&amp;quot;, lastName: &amp;quot;Doe&amp;quot;};
let {firstName, lastName} = person;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解构另一个特性是，变量 keys 可以使用&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&#34;&gt;计算后的属性名&lt;/a&gt;，但是如果你对这容易混淆的话，不建议使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let person = {firstName: &amp;quot;John&amp;quot;, lastName: &amp;quot;Doe&amp;quot;};
let {firstName: name, lastName} = person;
// `name`变量将会被声明为 `person.firstName` 的值
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;函数参数的解构赋值&#34;&gt;函数参数的解构赋值&lt;/h3&gt;

&lt;p&gt;函数的参数也可以解构赋值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function add({x: 0, y: 0}){
    return x+y;
}
add({1,2}); // 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;null-和-undefined&#34;&gt;null 和 undefined&lt;/h3&gt;

&lt;p&gt;当尝试解构 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 的时候会报错。这是因为使用对象赋值模式时，被解构的值必需能够转换成一个对象（object）。大多数的类型都可以转换为一个对象，但null和undefined却并不能被转换。&lt;/p&gt;

&lt;h3 id=&#34;其它&#34;&gt;其它&lt;/h3&gt;

&lt;p&gt;解构赋值的好处有很多，比如&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两个值的交换&lt;/li&gt;
&lt;li&gt;函数参数默认值&lt;/li&gt;
&lt;li&gt;函数返回值&lt;/li&gt;
&lt;li&gt;正则匹配的返回值&lt;/li&gt;
&lt;li&gt;快速处理 JSON 数据&lt;/li&gt;
&lt;li&gt;遍历Map结构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ES6 的解构赋值给 JS 的书写带来了很大的便利性，同时也提高了代码的可读性。但是也需要注意一些问题，避免适得其反。
* 关于圆括号的问题，欢迎翻看&lt;a href=&#34;http://es6.ruanyifeng.com/#docs/destructuring#圆括号问题&#34;&gt;阮一峰老师的博客&lt;/a&gt;
* 解构的嵌套尽量不要太深
* 函数有多个返回值时，尽量使用对象解构而不用数组解构，避免出现顺序对应问题
* 已声明过的变量不能用于解构&lt;/p&gt;

&lt;h3 id=&#34;浏览器支持&#34;&gt;浏览器支持&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://kangax.github.io/compat-table/es6/#destructuring&#34;&gt;http://kangax.github.io/compat-table/es6/#destructuring&lt;/a&gt;
不完全统计：
* IE NO
* FF 38+ (大部分)
* CH/OP NO
* Webkit
* SF 9+, 8部分
* IOS8 部分&lt;/p&gt;

&lt;p&gt;PS: 整理的时候发现以前还保留着这样一份文章，无新，基本参考下述文章内容。仅供学习。&lt;/p&gt;

&lt;h3 id=&#34;参考文章&#34;&gt;参考文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://es6.ruanyifeng.com/#docs/destructuring&#34;&gt;变量的解构赋值 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-destructuring/&#34;&gt;ES6 In Depth: Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://strongloop.com/strongblog/getting-started-with-javascript-es6-destructuring/&#34;&gt;Getting Started with JavaScript ES6 Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
